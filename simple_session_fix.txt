
====== SIMPLEST SESSION FIX FOR PROPINTEL ======

1. Open app.py and add this near the top (after imports):

# Set a secure secret key
app.secret_key = "propintel-secure-key-change-this"

# Configure cookie session settings
app.config["SESSION_COOKIE_SECURE"] = False  # Change to True in production with HTTPS
app.config["SESSION_COOKIE_HTTPONLY"] = True
app.config["SESSION_COOKIE_SAMESITE"] = "Lax"

# Set longer session lifetime
app.config["PERMANENT_SESSION_LIFETIME"] = 2592000  # 30 days in seconds


2. Replace your login function with this simplified version:

@app.route('/login', methods=['GET', 'POST'])
def login():
    """User login page"""
    # If already logged in, redirect
    if g.user:
        return redirect(url_for('index'))
        
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        
        # Special handling for guest
        if username.lower() == 'guest':
            session.clear()
            session['user_id'] = 'guest'
            session.permanent = True
            return redirect(url_for('index'))
        
        # Special handling for admin
        if username.lower() == 'admin' and password == 'admin123':
            session.clear()
            session['user_id'] = '1'  # Store as string
            session.permanent = True
            return redirect(url_for('index'))
        
        # Regular login (database checks)
        flash('Login failed', 'danger')
        
    return render_template('login.html')


3. Replace your before_request function with this simplified version:

@app.before_request
def before_request():
    """Load logged in user"""
    g.user = None
    
    # Skip for static files
    if request.path.startswith('/static/'):
        return
    
    # Check for user_id in session
    if 'user_id' in session:
        user_id = session['user_id']
        
        # Handle guest user
        if user_id == 'guest':
            g.user = {'user_id': 'guest', 'role': 'guest'}
            return
            
        # Handle admin user
        if user_id == '1':
            g.user = {'user_id': 1, 'username': 'admin', 'role': 'admin'}
            return
            
        # Regular users (database lookup)
        # your existing code...


4. Add a simple login check in index.html:

<p>Current user: {{ g.user.username if g.user else "Not logged in" }}</p>


5. Make sure your templates don't have HTML syntax errors
